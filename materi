Bagian 1. Server



Bagian 2. Handler
- Server hanya bertugas sebagai web server, sedangkan untuk menerima HTTP Request yang masuk ke Server, kita butuh yang namanya handler
- Handler di Go-Lang di representasikan dalam INTERFACE (bukan struct), dimana dalam kontraknya terdapat sebuah function bernama ServerHTTP() yang digunakan sebagai function yang akan di eksekusi ketika menerima HTTP Request

HandlerFunc
- Salah satu implementasi dari interface Handler adalah HandlerFunc
- Kita bisa menggunakan HandlerFunc untuk membuat function handler HTTP

Bagian 3. Serve Mux
- Saat membuat web, kita biasanya ingin membuat banyak sekali endpoint URL
- HandleFunc sayangnya tidak mendukung itu
- Alternative implementasi dari Handler adalah ServeMux
- ServeMux adalah implementasi Handler yang bisa mendukung multiple endpoint
- ServerMux itu seperti Router kalau di framework besar

[Checkpoint Serve Mux -> Ngoding dulu]

URL Pattern
- URL Pattern pada ServeMux sangat sederhana, kita tinggal menambahkan string yang ingin kita gunakan sebagai endpoint, tanpa perlu memasukkan domain web kita
- Jika URL Pattern dalam ServeMux kita tambahkan di akhirnya dengan garis miring, artinya semua URL tersebut akan menerima path dengan awalan tersebut, misalnya /images/ artinya akan dieksekusi jika endpointnya /images/contoh, /images/contoh/contohlagi
- Namun jika terdapat URL Pattern yang lebih panjang, maka akan diprioritaskan yang lebih panjang, misal jika terdapat URL /images/ dan /images/thumbnails/, maka jika mengakses /images/thumbnails/ akan mengakses /images/thumbnails/, bukan /images

Bagian 4. Request
- Request adalah STRUCT yang merepresentasikan HTTP request yang dikirim oleh Web Browser
- Semua informasi request yang dikirim bisa kita dapatkan di Request
- Seperti URL, HTTP Method, HTTP Header, HTTP Body, danlainlain.

Bagian 5. HTTP Test
- Golang sudah menyediakan package khusus untuk membuat unit test terhadap fitur Web yang kita buat
- Semuanya ada didalam package net/http/httptest
- Dengan menggunakan package ini, kita bisa melakukan testing handler web di Go-Lang tanpa harus menjalankan aplikasi Webnya
- Kita bisa langsung fokus terhadap handler functionnya yang ingin kita test

STEP 1

httptest.NewRequest()
- NewRequest(method, url, body) merupakan function yang digunakan untuk membuat http.Request
- Kita bisa menentukan method, url, dan body yang akan kita kiri sebagai simulasi unit test
- Selain itu, kita juga bisa menambahkan informasi tambahan lainnya pada request yang ingin kita kirim, seperti header, cookie, danlainlain

STEP 2
httptest.NewRecorder()
- httptest.NewRecorder() merupakan function yang digunakan untuk membuat ResponseRecorder
- ResponseRecorder merupakan struct bantuan untuk merekam HTTP Response dari hasil testing yang kita lakukan

Bagian 6. Query Parameter
- Query Parametr adalah salah satu fitur yang biasa digunakan ketika membuat web
- Query Parameter biasanya digunakan untuk mengirim data dari client ke server
- Query Parameter ditempatkan di URL
- Untuk menambahkan Query Parameter, kita bisa menggunakan ?nama=value pada URLnya

url.URL
- Dalam parameter Request, terdapat attribute URL yang berisi data url.URL
- Dari data URL ini, kita bisa mengambil data query parameter yang dikirim dari client dengan menggunakan method Query() yang akan mengembalikan map

[Checkpoint -> Cek kodingan dulu sampai QueryParams]

Multiple Query
- Dalam spesifikasi URL, kita bisa menambahkan lebih dari satu Query parameter
- Ini cocok sekali jika kita ingin mengirim banyak data ke server, cukup tambahkan query parameter lainnya
- Untuk menambahkan query parameter, kita bisa gunakan tanda "&" lalu diikuti dengan query parameter berikutnya

Multiple Value Query Parameter
- Sebenarnya URL melakukan Parsing query parameter dan menyimpannya dalam map[string][]string
- Artinya, dalam satu key query parameter, kita bisa memasukkan beberapa value
- Caranya kita bisa menambahkan query parameter dengan nama yang sama, namun value berbeda, misal:
- name=Riky&name=Hidayat

Bagian 7. Header
- Selain Query Parameter, dalam HTTP, ada juga yang bernama Header
- Header adalah informasi tambahan yang biasa dikirim dari client ke server atau sebaliknya
- Jadi dalam Header, tidak hanya ada pada HTTP Request, pada HTTP Response pun kita bisa menambahkan informasi Header
- Saat kita menggunakan browser, maka biasanya Header akan otomatis ditambahkan oleh browser, seperti informasi browser, jenis tipe content yang dikirim dan diterima oleh browser, danlainlain.

Request Header
- Untuk menangkap request header yang dikirim dari client, kita bisa mengambilnya di Request.Header
- Header mirip seperti Query Parameter, isinya adalah map[string][]string -> Slice
- Berbeda dengan Query Parameter yang case sensitive, secara spesifikasi, Header key tidaklah case sensitive

[Checkpoint Ngoding dulu]

Response Header
- Sedangkan jika kita ingin menambahkan header kepada response, kita bisa menggunakan function ResponseWriter.Header()