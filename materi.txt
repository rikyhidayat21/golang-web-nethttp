Bagian 1. Server



Bagian 2. Handler
- Server hanya bertugas sebagai web server, sedangkan untuk menerima HTTP Request yang masuk ke Server, kita butuh yang namanya handler
- Handler di Go-Lang di representasikan dalam INTERFACE (bukan struct), dimana dalam kontraknya terdapat sebuah function bernama ServerHTTP() yang digunakan sebagai function yang akan di eksekusi ketika menerima HTTP Request

HandlerFunc
- Salah satu implementasi dari interface Handler adalah HandlerFunc
- Kita bisa menggunakan HandlerFunc untuk membuat function handler HTTP

Bagian 3. Serve Mux
- Saat membuat web, kita biasanya ingin membuat banyak sekali endpoint URL
- HandleFunc sayangnya tidak mendukung itu
- Alternative implementasi dari Handler adalah ServeMux
- ServeMux adalah implementasi Handler yang bisa mendukung multiple endpoint
- ServerMux itu seperti Router kalau di framework besar

[Checkpoint Serve Mux -> Ngoding dulu]

URL Pattern
- URL Pattern pada ServeMux sangat sederhana, kita tinggal menambahkan string yang ingin kita gunakan sebagai endpoint, tanpa perlu memasukkan domain web kita
- Jika URL Pattern dalam ServeMux kita tambahkan di akhirnya dengan garis miring, artinya semua URL tersebut akan menerima path dengan awalan tersebut, misalnya /images/ artinya akan dieksekusi jika endpointnya /images/contoh, /images/contoh/contohlagi
- Namun jika terdapat URL Pattern yang lebih panjang, maka akan diprioritaskan yang lebih panjang, misal jika terdapat URL /images/ dan /images/thumbnails/, maka jika mengakses /images/thumbnails/ akan mengakses /images/thumbnails/, bukan /images

Bagian 4. Request
- Request adalah STRUCT yang merepresentasikan HTTP request yang dikirim oleh Web Browser
- Semua informasi request yang dikirim bisa kita dapatkan di Request
- Seperti URL, HTTP Method, HTTP Header, HTTP Body, danlainlain.

Bagian 5. HTTP Test
- Golang sudah menyediakan package khusus untuk membuat unit test terhadap fitur Web yang kita buat
- Semuanya ada didalam package net/http/httptest
- Dengan menggunakan package ini, kita bisa melakukan testing handler web di Go-Lang tanpa harus menjalankan aplikasi Webnya
- Kita bisa langsung fokus terhadap handler functionnya yang ingin kita test

STEP 1

httptest.NewRequest()
- NewRequest(method, url, body) merupakan function yang digunakan untuk membuat http.Request
- Kita bisa menentukan method, url, dan body yang akan kita kiri sebagai simulasi unit test
- Selain itu, kita juga bisa menambahkan informasi tambahan lainnya pada request yang ingin kita kirim, seperti header, cookie, danlainlain

STEP 2
httptest.NewRecorder()
- httptest.NewRecorder() merupakan function yang digunakan untuk membuat ResponseRecorder
- ResponseRecorder merupakan struct bantuan untuk merekam HTTP Response dari hasil testing yang kita lakukan

Bagian 6. Query Parameter
- Query Parametr adalah salah satu fitur yang biasa digunakan ketika membuat web
- Query Parameter biasanya digunakan untuk mengirim data dari client ke server
- Query Parameter ditempatkan di URL
- Untuk menambahkan Query Parameter, kita bisa menggunakan ?nama=value pada URLnya

url.URL
- Dalam parameter Request, terdapat attribute URL yang berisi data url.URL
- Dari data URL ini, kita bisa mengambil data query parameter yang dikirim dari client dengan menggunakan method Query() yang akan mengembalikan map

[Checkpoint -> Cek kodingan dulu sampai QueryParams]

Multiple Query
- Dalam spesifikasi URL, kita bisa menambahkan lebih dari satu Query parameter
- Ini cocok sekali jika kita ingin mengirim banyak data ke server, cukup tambahkan query parameter lainnya
- Untuk menambahkan query parameter, kita bisa gunakan tanda "&" lalu diikuti dengan query parameter berikutnya

Multiple Value Query Parameter
- Sebenarnya URL melakukan Parsing query parameter dan menyimpannya dalam map[string][]string
- Artinya, dalam satu key query parameter, kita bisa memasukkan beberapa value
- Caranya kita bisa menambahkan query parameter dengan nama yang sama, namun value berbeda, misal:
- name=Riky&name=Hidayat

Bagian 7. Header
- Selain Query Parameter, dalam HTTP, ada juga yang bernama Header
- Header adalah informasi tambahan yang biasa dikirim dari client ke server atau sebaliknya
- Jadi dalam Header, tidak hanya ada pada HTTP Request, pada HTTP Response pun kita bisa menambahkan informasi Header
- Saat kita menggunakan browser, maka biasanya Header akan otomatis ditambahkan oleh browser, seperti informasi browser, jenis tipe content yang dikirim dan diterima oleh browser, danlainlain.

Request Header
- Untuk menangkap request header yang dikirim dari client, kita bisa mengambilnya di Request.Header
- Header mirip seperti Query Parameter, isinya adalah map[string][]string -> Slice
- Berbeda dengan Query Parameter yang case sensitive, secara spesifikasi, Header key tidaklah case sensitive

[Checkpoint Ngoding dulu]

Response Header
- Sedangkan jika kita ingin menambahkan header kepada response, kita bisa menggunakan function ResponseWriter.Header()

Bagian 8. Form Post
- Saat kita belajar HTML, kita tahu bahwa saat kita membuat form, kita bisa submit datanya dengan method GET atau POST
- Jika menggunakan GET, maka hasilnya semua data di form akan menjadi Query Parameter
- Sedangkan jika menggunakan POST, maka semua data di form akan dikirim via Body HTTP Request
- Di Golang untuk mengambil data Form Post sangatlah mudah

Request.PostForm
- Semua data Form Post yang dikirim dari client, secara otomatis akan disimpan dalam attribute Request.PostForm
- Namun sebelum kita bisa mengambil data di attribute PostForm, kita WAJIB memanggil method Request.ParseForm() terlebih dahulu, method ini digunakan untuk melakukan parsing data body apakah bisa diparsing menjadi form data atau tidak, jika tidak bisa di parsing, maka akan menyebabkan error

Bagian 9. Response Code
- Dalam HTTP, terdapat yang namanya response code
- Response code merupakan representasi kode response
- Dari response code ini kita bisa melihat apakah sebuah request yang kita kirim itu sukses di proses oleh server atau gagal

Mengubah Response Code
- Secara default 200 OK
- Jika kita ingin mengubahnya, kita bisa menggunakan function ResponseWriter.WriteHeader(int)
- Semua data status juga sudah disediakan oleh Golang

Bagian 10. Cookie
Stateless
- HTTP merupakan stateless antara client dan server, artinya server tidak akan menyimpan data apapun untuk mengingat setiap request dari client
- Hal ini bertujuan agar mudah melakukan skalabiliti di sisi server
- Lantas bagaimana caranya agar server bisa mengingat sebuah client? Misal kita sudah login di website, server otomatis harus tahu jika client tersebut sudah login, sehingga request selanjutnya, tidak perlu diminta untuk login lagi.
- Untuk melakukan hal ini, kita bisa memanfaatkan Cookie.

Cookie
- Cookie adalah fitur dari HTTP dimana server bisa memberi response cookie (key-value) dan client akan menyimpan cookie tersebut di web browser
- Request selanjutnya, client akan selalu membawa cookie tersebut secara otomatis
- Dan server secara otomatis akan selalu menerima data cookie yang dibawa oleh client setiap kali client mengirimkan request

Membuat Cookie
- Cookie merupakan data yang dibuat diserver, dan sengaja agar disimpan di web browser
- Untuk membuat cookie di server, kita bisa menggunakan function http.SetCookie()

Bagian 11. FileServer
- Go-Lang memiliki sebuah fitur yang bernama FileServer
- Dengan ini, kita bisa membuat Handler di Go-Lang Web yang digunakan sebagai static file server
- Dengan menggunakan FileServer, kita tidak perlu manual me-load file lagi
- FileServer adalah Handler, jadi bisa kita tambahkan ke dalam http.Server atau http.ServeMux

[Setelah membuat kode, munculnya 404 Not Found], Kenapa?
- Jika kita coba jalankan, saat kita membuka misal /static/index.js, maka akan dapat error 404 Not Found
- Kenapa ini terjadi?
- Hal ini dikarenakan FileServer akan membaca URL, lalu mencari file berdasarkan URLnya, jadi jika kita membuat /static/index.js, maka FileServer akan mencari ke file /resources/static/index.js
- Hal ini menyebabkan 404 Not Found karena memang filenya tidak bisa ditemukan
- Oleh karena itu, kita bisa menggunakan function http.StripPrefix() untuk menghapus prefix di URL

Go-Lang Embed ##
- Di Golang 1.16 terdapat fitur baru yang bernama Golang embed
- Dalam Golang embed kita dapat embed file ke dalam binary distribution file, hal ini mempermudah sehingga kita tidak perlu meng-copy static file lagi
- Golang embed juga memiliki fitur yang bernama embed.FS, fitur ini bisa diintegrasikan dengan FileServer

[404 not found lagi nih], kenapa?
- Jika kita ingin langsung mengakses file index.js tanpa menggunakan resources, kita bisa menggunakan function fs.Sub() untuk mendapatkan subdirectory

Bagian 12. ServeFile
- Kadang ada kasus misal kita hanya ingin menggunakan static file sesuai dengan yang kita inginkan
- Hal ini bisa dilakukan menggunakan function http.ServeFile()
- Dengan menggunakan function ini, kita bisa menentukan file mana yang ingin kita tulis ke http response

[Check kodingan dulu]

Golang Embed
- Parameter function http.ServeFile hanya berisi string file name, sehingga tidak bis amenggunakan Golang embed
- Namun bukan berarti kita tidak bisa menggunakan Golang embed, karena jika untuk melakukan load file, kita hanya butuh menggunakan package fmt dan ResponseWriter saja
- Golang embed itu bisa meload file kedalam string

Bagian 13. Web Dinamis
- Sampai saat ini kita hanya membahas tentang membuat response menggunakan String dan juga static file
- Pada kenyataannya, saat kita membuat we, kita pasti akan membuat halaman yang dinamis, bisa berubah-ubah sesuai dengan data yang diakses oleh user
- Di Golang terdapat fitur HTML Template, yaitu fitur template yang bisa kita gunakan untuk membuat HTML yang dinamis

HTML Template
- Fitur HTML template terdapat di package html/template
- Sebelum menggunakan HTML template, kita perlu terlebih dahulu membuat templatenya
- Template bisa berupa file atau string
- Bagian dinamis pada HTML Template, adalah bagian yang menggunakan tanda {{ }}

Membuat Template
- Saat membuat template dengan string, kita perlu memberi tahu nama templatenya
- Dan untuk membuat text template, cukup buat text html, dan untuk konten yang dinamis, kita bisa gunakan tanda {{.}}, contoh:
<html><body>{{.}}</body></html>

Template Dari File
- Selain membuat template dari string, kita juga bisa membuat template langsung dari file
- Hal ini mempermudah kita, karena bisa langsung membuat file html
- Saat membuat template menggunakan file, secara otomatis nama file akan menjadi nama templatenya, misal jika kita punya file simple.html, maka nama templatenya adalah simple.html

[Next Chapter]

Template Directory
- Kadang biasanya kita jarang sekali menyebutkan file template satu persatu
- Alangkah baiknya untuk template kita simpan di satu Directory
- Golang template mendukung proses load template dari Directory
- Hal ini memudahkan kita, sehingga tidak perlu menyebutkan nama filenya satu per satu

[Next Chapter]
Template dari Golang Embed
- Sejak Golang 1.16, karena sudah ada Golang embed, jadi direkomendasikan menggunakan Golang embed untuk menyimpan data template
- Menggunakan golang embed menjadikan kita tidak perlu ikut mengcopy template file lagi, karena sudah otomatis di embed id dalam distribution file

Bagian 14. Template Data
- Saat kita membuat template, kadang kita ingin menambahkan banyak data dinamis
- Hal ini bisa dilakukan dengan data struct atau map
- Namum perlu dilakukan perubahan didalam text templatenya, kita perlu memberitahu Field atau Key mana yang akan kita gunakan untuk mengisi data dinamis di template
- Kita bisa menyebutkan dengan cara seperti ini {{.NamaField}}